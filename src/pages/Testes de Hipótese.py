import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="Testes de Hip√≥tese", layout="wide")
st.title("üîç Testes de Hip√≥tese - An√°lise Salarial em AI/ML/DS")

# Carregar o dataset
df = pd.read_csv("src/dataset.csv")

# Introdu√ß√£o
st.markdown("""
Os testes de hip√≥tese s√£o ferramentas estat√≠sticas que nos ajudam a tomar decis√µes com base em dados.

Neste estudo, vamos aplicar o **teste T de duas amostras** para comparar os sal√°rios de diferentes n√≠veis de senioridade (Pleno e S√™nior).    
- **Hip√≥tese nula (H‚ÇÄ)**: N√£o h√° diferen√ßa significativa entre os sal√°rios dos diferentes n√≠veis de senioridade.
- **Hip√≥tese alternativa (H‚ÇÅ)**: H√° uma diferen√ßa significativa entre os sal√°rios dos diferentes n√≠veis de senioridade.
""")

# Filtrar os dados para Pleno e S√™nior
salarios_pleno = df[df['experience_level'] == 'MI']['salary_in_usd'].dropna()
salarios_senior = df[df['experience_level'] == 'SE']['salary_in_usd'].dropna()

# Exibir as m√©dias salariais
media_pleno = np.mean(salarios_pleno)
media_senior = np.mean(salarios_senior)

st.markdown(f"""
### Sal√°rios M√©dios
- **Pleno**: ${media_pleno:,.2f}
- **S√™nior**: ${media_senior:,.2f}
""")

# Teste T de duas amostras
t_stat, p_val = stats.ttest_ind(salarios_pleno, salarios_senior, equal_var=False)

# Exibir os resultados do teste
st.markdown(f"""
### Resultados do Teste T
- Estat√≠stica t: {t_stat:.2f}
- p-valor: {p_val:.4f}
""")

# N√≠vel de signific√¢ncia
alpha = st.slider("Escolha o n√≠vel de signific√¢ncia (%)", min_value=1, max_value=10, value=5) / 100

if p_val < alpha:
    st.success(f"Rejeitamos H‚ÇÄ ao n√≠vel de signific√¢ncia de {alpha*100:.0f}%. Existe diferen√ßa significativa entre os sal√°rios de Pleno e S√™nior.")
else:
    st.info(f"N√£o rejeitamos H‚ÇÄ ao n√≠vel de signific√¢ncia de {alpha*100:.0f}%. N√£o foi encontrada diferen√ßa significativa entre os sal√°rios de Pleno e S√™nior.")

st.markdown("""
    Outra hip√≥tese √© em rela√ß√£o a propor√ß√£o de profissionais S√™nior que trabalham remoto. Ela √© maior que 50%?
        - H‚ÇÄ: p = 0,5
        - H‚ÇÅ: p > 0,5
""")

# Filtrar os dados para S√™niores que trabalham remoto
remote_seniors = len(df[(df['experience_level'] == 'SE') & (df['remote_ratio'] == 100)])
total_seniors = len(df[df['experience_level'] == 'SE'])

# Calcular a propor√ß√£o
proporcao_remote = remote_seniors / total_seniors if total_seniors > 0 else 0
st.markdown(f"""
### Propor√ß√£o de S√™niores que trabalham remoto
- Total de S√™niores: {total_seniors}
- Total de S√™niores Remotos: {remote_seniors}
- Propor√ß√£o: {proporcao_remote:.2%}
""")

# Teste de Propor√ß√£o
z = (proporcao_remote - 0.5) / np.sqrt((0.5 * (1 - 0.5)) / total_seniors)
p_val_proporcao = 1 - stats.norm.cdf(z)
st.markdown(f"""
### Resultados do Teste de Propor√ß√£o
- Estat√≠stica z: {z:.2f}
- p-valor: {p_val_proporcao:.4f}
""")

# Exibir o resultado do teste de propor√ß√£o
if p_val_proporcao < alpha:
    st.success(f"Rejeitamos H‚ÇÄ ao n√≠vel de signific√¢ncia de {alpha*100:.0f}%. A propor√ß√£o de S√™niores que trabalham remoto √© maior que 50%.")
else:
    st.info(f"N√£o rejeitamos H‚ÇÄ ao n√≠vel de signific√¢ncia de {alpha*100:.0f}%. A propor√ß√£o de S√™niores que trabalham remoto n√£o √© maior que 50%.")




